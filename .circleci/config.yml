version: 2.1

jobs:
  determine-changes:
    docker:
    - image: hashicorp/terraform:light
    steps:
    - checkout
    - run: |
        echo "GeÃ¤nderte Dateien im Vergleich zu origin/main:"
        git fetch origin
        git diff origin/main..HEAD
        echo "asdfsdafa"

        if git diff --name-only origin/main | grep -q '^application/tasky'; then
          echo "BUILD_DOCKER=true" >> pipeline-flags.env
        else
          echo "BUILD_DOCKER=false" >> pipeline-flags.env
        fi

        if git diff --name-only origin/main | grep -q '^infrastructure/'; then
          echo "RUN_TERRAFORM=true" >> pipeline-flags.env
        else
          echo "RUN_TERRAFORM=false" >> pipeline-flags.env
        fi
    - persist_to_workspace:
        root: .
        paths:
        - pipeline-flags.env

  security_scan:
    docker:
    - image: returntocorp/semgrep
    steps:
    - checkout
    - run:
        name: Run Semgrep (Static Code Analysis)
        command: semgrep scan --config=auto || true
    - run:
        name: Install Snyk
        command: npm install -g snyk || true
    - run:
        name: Run Snyk (Dependency Scan)
        command: snyk test || true
    - run:
        name: Install Checkov (IaC Scan)
        command: pip install checkov || true
    - run:
        name: Run Checkov (Terraform/Kubernetes Security Scan)
        command: checkov -d . || true

  terraform_plan:
    docker:
    - image: hashicorp/terraform:light
    steps:
    - checkout
    - attach_workspace:
        at: ~/project
    - run: |
        source ~/project/pipeline-flags.env 
        if [ "$RUN_TERRAFORM" != "true" ]; then
          echo "Terraform planning." 
          # circleci-agent step halt
        fi 
    - run:
        name: Initialize Terraform
        working_directory: ~/project/current_working/infra_terraform
        command: terraform init
    - run:
        name: Terraform Plan
        working_directory: ~/project/current_working/infra_terraform
        command: |
          terraform plan

  terraform_apply:
    docker:
    - image: hashicorp/terraform:light
    steps:
    - checkout
    - attach_workspace:
        at: ~/project
    - run: |
        source ~/project/pipeline-flags.env 
        if [ "$RUN_TERRAFORM" != "true" ]; then
          echo "Terraform running" 
          # circleci-agent step halt
        fi 
    - run:
        name: Initialize Terraform
        working_directory: ~/project/current_working/infra_terraform
        command: terraform init
    - run:
        name: Terraform Apply
        working_directory: ~/project/current_working/infra_terraform
        command: |
          terraform refresh
          terraform apply -auto-approve
          echo "MONGODB_PRIVATE_IP=$(terraform output -raw mongodb_private_ip)" > mongodb_private_ip.env
          cat mongodb_private_ip.env
          mv mongodb_private_ip.env ~/project
    - persist_to_workspace:
        root: .
        paths:
        - mongodb_private_ip.env

  build-and-push:
    machine:
      image: ubuntu-2204:current
    steps:
    - checkout
    - run:
        name: Authenticate with AWS ECR
        command: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY

    - run:
        name: Build Docker Image
        command: |
          docker build -t $ECR_REPOSITORY -f current_working/tasky/Dockerfile current_working/tasky

    - run:
        name: Run Trivy (Container Security Scan)
        command: |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image $ECR_REPOSITORY || true

    - run:
        name: Tag Docker Image
        command: |
          docker tag $ECR_REPOSITORY:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest

    - run:
        name: Push Docker Image to AWS ECR
        command: |
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

workflows:
  version: 2
  build_and_deploy:
    jobs:
    - determine-changes
    - security_scan:
        requires:
        - determine-changes
    - terraform_plan:
        requires:
        - determine-changes
    - terraform_apply:
        requires:
        - determine-changes
        - terraform_plan
    - build-and-push:
        requires:
        - determine-changes
        - terraform_apply
