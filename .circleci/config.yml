version: 2.1

jobs:
  determine-changes:
    docker:
    - image: hashicorp/terraform:light
    steps:
    - checkout
    - run: |
        echo "GeÃ¤nderte Dateien im Vergleich zu origin/main:"
        git fetch origin
        git diff origin/main..HEAD

        if git diff --name-only origin/main | grep -q '^application/tasky'; then
          echo "BUILD_DOCKER=true" >> pipeline-flags.env
        else
          echo "BUILD_DOCKER=false" >> pipeline-flags.env
        fi

        if git diff --name-only origin/main | grep -q '^infrastructure/'; then
          echo "RUN_TERRAFORM=true" >> pipeline-flags.env
        else
          echo "RUN_TERRAFORM=false" >> pipeline-flags.env
        fi
    - persist_to_workspace:
        root: .
        paths:
        - pipeline-flags.env

  terraform_plan_eks:
    docker:
    - image: hashicorp/terraform:light
    steps:
    - checkout
    - attach_workspace:
        at: ~/project
    - run:
        name: Initialize Terraform
        working_directory: ~/project/current_working/infra_terraform
        command: terraform init
    - run:
        name: Terraform Apply
        working_directory: ~/project/current_working/infra_terraform
        command: |
          terraform plan -target=module.eks 

  terraform_plan:
    docker:
    - image: hashicorp/terraform:light
    steps:
    - checkout
    - attach_workspace:
        at: ~/project
    - run:
        name: Initialize Terraform
        working_directory: ~/project/current_working/infra_terraform
        command: terraform init
    - run:
        name: Terraform Plan
        working_directory: ~/project/current_working/infra_terraform
        command: terraform plan

  trivy-security-scan:
    docker:
    - image: aquasec/trivy:latest
    steps:
    - checkout
    - run:
        name: Scan Docker Image for Vulnerabilities
        command: |
          trivy image --severity LOW,MEDIUM,HIGH,CRITICAL --ignore-unfixed $ECR_REGISTRY/$ECR_REPOSITORY:latest || true

  checkov-security-scan:
    docker:
    - image: python:3.9
    steps:
    - checkout
    - run:
        name: Install Checkov
        command: |
          pip install --no-cache-dir checkov
    - run:
        name: Run Checkov Scan
        command: |
          checkov -d . --soft-fail

  gosec-security-scan:
    docker:
    - image: golang:1.23
    steps:
    - checkout
    - run:
        name: Install Gosec
        command: |
          go install github.com/securego/gosec/v2/cmd/gosec@latest
    - run:
        name: Run Gosec Security Scan
        working_directory: current_working/tasky
        command: |
          go mod tidy
          gosec -fmt=json -stdout ./... || true

  golangci-lint-scan:
    docker:
    - image: golangci/golangci-lint:latest
    steps:
    - checkout
    - run:
        name: Run GolangCI-Lint Quality Scan
        working_directory: current_working/tasky
        command: |
          golangci-lint run --enable=gosec --enable=errcheck --enable=govet --enable=staticcheck --enable=unused || true

  terraform_apply_eks:
    docker:
    - image: hashicorp/terraform:light
    steps:
    - checkout
    - attach_workspace:
        at: ~/project
    - run:
        name: Initialize Terraform
        working_directory: ~/project/current_working/infra_terraform
        command: terraform init
    - run:
        name: Terraform Apply
        working_directory: ~/project/current_working/infra_terraform
        command: |
          terraform apply -target=module.eks -auto-approve

  terraform_apply:
    docker:
    - image: hashicorp/terraform:light
    steps:
    - checkout
    - attach_workspace:
        at: ~/project
    - run:
        name: Initialize Terraform
        working_directory: ~/project/current_working/infra_terraform
        command: terraform init
    - run:
        name: Terraform Apply
        working_directory: ~/project/current_working/infra_terraform
        command: |
          terraform apply -auto-approve
          echo "MONGODB_PRIVATE_IP=$(terraform output -raw mongodb_private_ip)" > mongodb_private_ip.env
          mv mongodb_private_ip.env ~/project
    - persist_to_workspace:
        root: .
        paths:
        - mongodb_private_ip.env

  build-and-push:
    machine:
      image: ubuntu-2204:current
    steps:
    - checkout
    - run:
        name: Authenticate with AWS ECR
        command: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY
    - run:
        name: Build and Push Docker Image
        command: |
          docker build -t $ECR_REPOSITORY -f current_working/tasky/Dockerfile current_working/tasky
          docker tag $ECR_REPOSITORY:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

  deploy:
    docker:
    - image: amazon/aws-cli
    steps:
    - checkout
    - run:
        name: Install required packages
        command: |
          yum install -y tar gzip jq
    - attach_workspace:
        at: ~/project
    - run:
        name: Install Tools
        command: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          mv kubectl /usr/local/bin/
    - run:
        name: Configure AWS CLI & EKS
        command: |
          aws configure set region $AWS_REGION
          aws eks update-kubeconfig --region $AWS_REGION --name workwiz-cluster
    - run:
        name: Retrieve MongoDB Secret from AWS
        command: |
          SECRET_JSON=$(aws secretsmanager get-secret-value --secret-id workwiz-mongodb-creds --query SecretString --output text)
          echo $SECRET_JSON | jq -r 'to_entries|map("\(.key)=\(.value|tostring)")|.[]' > .env
    - run:
        name: Ensure Tasky Namespace Exists
        command: |
          kubectl create namespace tasky --dry-run=client -o yaml | kubectl apply -f -
    - run:
        name: Create Kubernetes Secret
        command: |
          source .env
          source ~/project/mongodb_private_ip.env
          kubectl create secret generic mongodb-secret \
            --from-literal=MONGO_URI="mongodb://$username:$password@$MONGODB_PRIVATE_IP:27017/" \
            --namespace tasky \
            --dry-run=client -o yaml | kubectl apply -f -
    - run:
        name: Create ECR Pull Secret in Kubernetes
        command: |
          kubectl create secret docker-registry ecr-registry-secret \
            --docker-server=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com \
            --docker-username=AWS \
            --docker-password=$(aws ecr get-login-password --region $AWS_REGION) \
            --namespace tasky || true
    - run:
        name: Deploy WebApp to Kubernetes
        command: |
          echo "
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: webapp-deployment
            namespace: tasky
            labels:
              app: webapp
          spec:
            replicas: 2
            selector:
              matchLabels:
                app: webapp
            template:
              metadata:
                labels:
                  app: webapp
              spec:
                serviceAccountName: web-app-sa
                containers:
                - name: tasky
                  image: $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/lone_klughardt:latest
                  ports:
                  - containerPort: 8080
                  env:
                  - name: MONGODB_URI
                    valueFrom:
                      secretKeyRef:
                        name: mongodb-secret
                        key: MONGO_URI
                imagePullSecrets:
                  - name: ecr-registry-secret
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: webapp-service
            namespace: tasky
          spec:
            type: NodePort
            selector:
              app: webapp
            ports:
            - protocol: TCP
              port: 8080
              targetPort: 8080
              nodePort: 30080
          " | kubectl apply -f -        

    - run:
        name: Restart WebApp Deployment Pods
        command: |
          kubectl rollout restart deployment webapp-deployment -n tasky
    - run:
        name: Deploy the rest to Kubernetes
        command: kubectl apply -f ./current_working/3_tier_app_kubernetes/ --namespace tasky

workflows:
  version: 2
  build_and_deploy:
    jobs:
    - determine-changes
    - terraform_plan:
        requires:
        - determine-changes
        - terraform_apply_eks
    - trivy-security-scan:
        requires:
        - determine-changes
    - checkov-security-scan:
        requires:
        - determine-changes
    - gosec-security-scan:
        requires:
        - determine-changes
    - golangci-lint-scan:
        requires:
        - determine-changes
    - terraform_apply:
        requires:
        - terraform_plan
    - build-and-push:
        requires:
        - determine-changes
    - deploy:
        requires:
        - terraform_apply
        - build-and-push
