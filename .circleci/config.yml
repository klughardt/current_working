version: 2.1

jobs:
  determine-changes:
    docker:
    - image: hashicorp/terraform:light
    steps:
    - checkout
    - run: |
        echo "GeÃ¤nderte Dateien im Vergleich zu origin/main:"
        git fetch origin
        git diff origin/main..HEAD
        echo "asdfsdafa"

        if git diff --name-only origin/main | grep -q '^application/tasky'; then
          echo "BUILD_DOCKER=true" >> pipeline-flags.env
        else
          echo "BUILD_DOCKER=false" >> pipeline-flags.env
        fi

        if git diff --name-only origin/main | grep -q '^infrastructure/'; then
          echo "RUN_TERRAFORM=true" >> pipeline-flags.env
        else
          echo "RUN_TERRAFORM=false" >> pipeline-flags.env
        fi
    - persist_to_workspace:
        root: .
        paths:
        - pipeline-flags.env

  terraform_plan:
    docker:
    - image: hashicorp/terraform:light
    steps:
    - checkout
    - attach_workspace:
        at: ~/project
    - run: |
        source ~/project/pipeline-flags.env 
        if [ "$RUN_TERRAFORM" != "true" ]; then
          echo "Terraform planning." 
          # circleci-agent step halt
        fi 
    - run:
        name: Initialize Terraform
        working_directory: ~/project/current_working/infra_terraform
        command: terraform init
    - run:
        name: Terraform Plan
        working_directory: ~/project/current_working/infra_terraform
        command: terraform plan

  terraform_apply:
    docker:
    - image: hashicorp/terraform:light
    steps:
    - checkout
    - attach_workspace:
        at: ~/project
    - run: |
        source ~/project/pipeline-flags.env 
        if [ "$RUN_TERRAFORM" != "true" ]; then
          echo "Terraform running" 
          # circleci-agent step halt
        fi 
    - run:
        name: Initialize Terraform
        working_directory: ~/project/current_working/infra_terraform
        command: terraform init
    - run:
        name: Terraform Apply
        working_directory: ~/project/current_working/infra_terraform
        command: |
          terraform apply -auto-approve
          echo "MONGODB_PRIVATE_IP=$(terraform output -raw mongodb_private_ip)" > mongodb_private_ip.env
          cat mongodb_private_ip.env
          mv mongodb_private_ip.env ~/project
    - persist_to_workspace:
        root: .
        paths:
        - mongodb_private_ip.env

    - run:
        name: Show value in next step
        command: |
          source ~/project/mongodb_private_ip.env
          echo "Next step: Captured MongoDB URI:"
          echo $MONGODB_PRIVATE_IP

  deploy:
    docker:
    - image: amazon/aws-cli
    steps:
    - checkout
    - run:
        name: Install tar
        command: |
          yum install -y tar
          yum install gzip
    - attach_workspace:
        at: ~/project
    - run:
        name: Install kubectl
        command: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          mv kubectl /usr/local/bin/
    - run:
        name: Configure AWS CLI
        command: |
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
          aws configure set region $AWS_REGION
    - run:
        name: Setup kubectl
        command: |
          aws eks update-kubeconfig --region $AWS_REGION --name workwiz
    - run:
        name: Install jq
        command: |
          yum install -y jq
    - run:
        name: Retrieve MongoDB Secret from AWS
        command: |
          SECRET_JSON=$(aws secretsmanager get-secret-value --secret-id workwiz-mongodb-creds --query SecretString --output text)
          echo $SECRET_JSON | jq -r 'to_entries|map("\(.key)=\(.value|tostring)")|.[]' > .env
          cat .env
    - run:
        name: Create Kubernetes Secret
        command: |
          source .env
          source ~/project/mongodb_private_ip.env
          kubectl create secret generic mongodb-secret \
            --from-literal=MONGO_URI="mongodb://$username:$password@$MONGODB_PRIVATE_IP:27017/" \
            --dry-run=client -o yaml | kubectl apply -f -
          echo $username
          echo $password
          echo "mongodb://$username:$password@$MONGODB_PRIVATE_IP:27017/"

    - run:
        name: Deploy to Kubernetes
        command: kubectl apply -f ./current_working/3_tier_app_kubernetes/

workflows:
  version: 2
  build_and_deploy:
    jobs:
    - determine-changes

    - terraform_plan:
        requires:
        - determine-changes

    - terraform_apply:
        requires:
        - determine-changes
        - terraform_plan

    - deploy:
        requires:
        - terraform_apply
